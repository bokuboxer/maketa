name: Deploy Release

on:
  push:
    branches:
      - release
      - feat/deploy-process

jobs:
  terraform:
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.modified, 'terraform/')
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - name: Check for terraform changes
        id: terraform-changed
        run: |
          if git diff --name-only HEAD~1 HEAD | grep -q "^terraform/"; then
            echo "::set-output name=changed::true"
          else
            echo "::set-output name=changed::false"
          fi

      - name: Setup Terraform
        if: steps.terraform-changed.outputs.changed == 'true'
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        if: steps.terraform-changed.outputs.changed == 'true'
        run: |
          cd terraform
          terraform init
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

      - name: Terraform Apply
        if: steps.terraform-changed.outputs.changed == 'true'
        run: |
          cd terraform
          terraform apply -auto-approve
        env:
          TF_VAR_db_admin_username: ${{ secrets.DB_ADMIN_USERNAME }}
          TF_VAR_db_admin_password: ${{ secrets.DB_ADMIN_PASSWORD }}
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

  deploy_database:
    needs: [terraform]
    runs-on: ubuntu-latest
    if: always() && (needs.terraform.result == 'success' || needs.terraform.result == 'skipped')
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        run: |
          cd terraform
          # terraform.tfvarsファイルを作成
          cat > terraform.tfvars << EOF
          subscription_id = "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
          tenant_id = "${{ secrets.AZURE_TENANT_ID }}"
          client_id = "${{ secrets.AZURE_CLIENT_ID }}"
          client_secret = "${{ secrets.AZURE_CLIENT_SECRET }}"
          db_admin_username = "${{ secrets.DB_ADMIN_USERNAME }}"
          db_admin_password = "${{ secrets.DB_ADMIN_PASSWORD }}"
          firebase_api_key = "${{ secrets.FIREBASE_API_KEY }}"
          firebase_app_id = "${{ secrets.FIREBASE_APP_ID }}"
          EOF

          terraform init
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

      - name: Get Database URL
        id: db-url
        run: |
          cd terraform
          # Initialize Terraform
          terraform init
          
          # Import existing state
          terraform state pull
          
          # MySQLサーバーのFQDNを直接取得
          MYSQL_FQDN=$(terraform state show azurerm_mysql_flexible_server.main | grep fqdn | awk '{print $3}' | tr -d '"')
          echo "Found MYSQL_FQDN: ${MYSQL_FQDN}"
          echo "database_url=mysql+pymysql://${{ secrets.DB_ADMIN_USERNAME }}:${{ secrets.DB_ADMIN_PASSWORD }}@${MYSQL_FQDN}:3306/maketa" >> $GITHUB_OUTPUT
          echo "Generated URL (password hidden):"
          echo "mysql+pymysql://${{ secrets.DB_ADMIN_USERNAME }}:****@${MYSQL_FQDN}:3306/maketa"
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

      - name: Run Database Migrations
        env:
          DATABASE_URL: ${{ steps.db-url.outputs.database_url }}
        run: |
          echo "Using DATABASE_URL: $DATABASE_URL" | sed 's/:[^:]*@/@/g'  # パスワードを隠してデバッグ出力
          cd backend
          pip install poetry
          poetry install
          poetry run alembic upgrade head

  deploy_backend:
    needs: [terraform, deploy_database]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Build and push Docker image (backend)
        uses: docker/build-push-action@v3
        with:
          context: ./backend
          push: true
          tags: ${{ secrets.ACR_LOGIN_SERVER }}/backend:${{ github.sha }}

      - name: Deploy to Azure Web App (backend)
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ secrets.BACKEND_WEBAPP_NAME }}
          images: ${{ secrets.ACR_LOGIN_SERVER }}/backend:${{ github.sha }}

  deploy_frontend:
    needs: [terraform, deploy_backend]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Build and push Docker image (frontend)
        uses: docker/build-push-action@v3
        with:
          context: ./frontend
          push: true
          tags: ${{ secrets.ACR_LOGIN_SERVER }}/frontend:${{ github.sha }}

      - name: Deploy to Azure Web App (frontend)
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ secrets.FRONTEND_WEBAPP_NAME }}
          images: ${{ secrets.ACR_LOGIN_SERVER }}/frontend:${{ github.sha }}
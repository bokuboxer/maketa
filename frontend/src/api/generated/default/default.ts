/**
 * Generated by orval v7.5.0 🍺
 * Do not edit manually.
 * FastAPI
 * OpenAPI spec version: 0.1.0
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  AnalyzeFailureFailuresFailureIdAnalyzePost200,
  CreateFailureInput,
  CreateUserInput,
  GetUserByFirebaseUidUserFirebaseUidGet200,
  HTTPValidationError
} from '../../model'
import { customAxios } from '../../mutator';



/**
 * @summary Create User
 */
export const createUserUsersPost = (
    createUserInput: CreateUserInput,
 signal?: AbortSignal
) => {
      
      
      return customAxios<unknown>(
      {url: `/users`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createUserInput, signal
    },
      );
    }
  


export const getCreateUserUsersPostMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createUserUsersPost>>, TError,{data: CreateUserInput}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof createUserUsersPost>>, TError,{data: CreateUserInput}, TContext> => {
    
const mutationKey = ['createUserUsersPost'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createUserUsersPost>>, {data: CreateUserInput}> = (props) => {
          const {data} = props ?? {};

          return  createUserUsersPost(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateUserUsersPostMutationResult = NonNullable<Awaited<ReturnType<typeof createUserUsersPost>>>
    export type CreateUserUsersPostMutationBody = CreateUserInput
    export type CreateUserUsersPostMutationError = HTTPValidationError

    /**
 * @summary Create User
 */
export const useCreateUserUsersPost = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createUserUsersPost>>, TError,{data: CreateUserInput}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof createUserUsersPost>>,
        TError,
        {data: CreateUserInput},
        TContext
      > => {

      const mutationOptions = getCreateUserUsersPostMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Get User By Firebase Uid
 */
export const getUserByFirebaseUidUserFirebaseUidGet = (
    firebaseUid: string,
 signal?: AbortSignal
) => {
      
      
      return customAxios<GetUserByFirebaseUidUserFirebaseUidGet200>(
      {url: `/user/${firebaseUid}`, method: 'GET', signal
    },
      );
    }
  

export const getGetUserByFirebaseUidUserFirebaseUidGetQueryKey = (firebaseUid: string,) => {
    return [`/user/${firebaseUid}`] as const;
    }

    
export const getGetUserByFirebaseUidUserFirebaseUidGetInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getUserByFirebaseUidUserFirebaseUidGet>>>, TError = HTTPValidationError>(firebaseUid: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserByFirebaseUidUserFirebaseUidGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserByFirebaseUidUserFirebaseUidGetQueryKey(firebaseUid);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserByFirebaseUidUserFirebaseUidGet>>> = ({ signal }) => getUserByFirebaseUidUserFirebaseUidGet(firebaseUid, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(firebaseUid), ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserByFirebaseUidUserFirebaseUidGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetUserByFirebaseUidUserFirebaseUidGetInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getUserByFirebaseUidUserFirebaseUidGet>>>
export type GetUserByFirebaseUidUserFirebaseUidGetInfiniteQueryError = HTTPValidationError


export function useGetUserByFirebaseUidUserFirebaseUidGetInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserByFirebaseUidUserFirebaseUidGet>>>, TError = HTTPValidationError>(
 firebaseUid: string, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserByFirebaseUidUserFirebaseUidGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserByFirebaseUidUserFirebaseUidGet>>,
          TError,
          Awaited<ReturnType<typeof getUserByFirebaseUidUserFirebaseUidGet>>
        > , 'initialData'
      >, }

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUserByFirebaseUidUserFirebaseUidGetInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserByFirebaseUidUserFirebaseUidGet>>>, TError = HTTPValidationError>(
 firebaseUid: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserByFirebaseUidUserFirebaseUidGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserByFirebaseUidUserFirebaseUidGet>>,
          TError,
          Awaited<ReturnType<typeof getUserByFirebaseUidUserFirebaseUidGet>>
        > , 'initialData'
      >, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUserByFirebaseUidUserFirebaseUidGetInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserByFirebaseUidUserFirebaseUidGet>>>, TError = HTTPValidationError>(
 firebaseUid: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserByFirebaseUidUserFirebaseUidGet>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get User By Firebase Uid
 */

export function useGetUserByFirebaseUidUserFirebaseUidGetInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserByFirebaseUidUserFirebaseUidGet>>>, TError = HTTPValidationError>(
 firebaseUid: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserByFirebaseUidUserFirebaseUidGet>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetUserByFirebaseUidUserFirebaseUidGetInfiniteQueryOptions(firebaseUid,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetUserByFirebaseUidUserFirebaseUidGetQueryOptions = <TData = Awaited<ReturnType<typeof getUserByFirebaseUidUserFirebaseUidGet>>, TError = HTTPValidationError>(firebaseUid: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserByFirebaseUidUserFirebaseUidGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserByFirebaseUidUserFirebaseUidGetQueryKey(firebaseUid);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserByFirebaseUidUserFirebaseUidGet>>> = ({ signal }) => getUserByFirebaseUidUserFirebaseUidGet(firebaseUid, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(firebaseUid), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUserByFirebaseUidUserFirebaseUidGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetUserByFirebaseUidUserFirebaseUidGetQueryResult = NonNullable<Awaited<ReturnType<typeof getUserByFirebaseUidUserFirebaseUidGet>>>
export type GetUserByFirebaseUidUserFirebaseUidGetQueryError = HTTPValidationError


export function useGetUserByFirebaseUidUserFirebaseUidGet<TData = Awaited<ReturnType<typeof getUserByFirebaseUidUserFirebaseUidGet>>, TError = HTTPValidationError>(
 firebaseUid: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserByFirebaseUidUserFirebaseUidGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserByFirebaseUidUserFirebaseUidGet>>,
          TError,
          Awaited<ReturnType<typeof getUserByFirebaseUidUserFirebaseUidGet>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUserByFirebaseUidUserFirebaseUidGet<TData = Awaited<ReturnType<typeof getUserByFirebaseUidUserFirebaseUidGet>>, TError = HTTPValidationError>(
 firebaseUid: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserByFirebaseUidUserFirebaseUidGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserByFirebaseUidUserFirebaseUidGet>>,
          TError,
          Awaited<ReturnType<typeof getUserByFirebaseUidUserFirebaseUidGet>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUserByFirebaseUidUserFirebaseUidGet<TData = Awaited<ReturnType<typeof getUserByFirebaseUidUserFirebaseUidGet>>, TError = HTTPValidationError>(
 firebaseUid: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserByFirebaseUidUserFirebaseUidGet>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get User By Firebase Uid
 */

export function useGetUserByFirebaseUidUserFirebaseUidGet<TData = Awaited<ReturnType<typeof getUserByFirebaseUidUserFirebaseUidGet>>, TError = HTTPValidationError>(
 firebaseUid: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserByFirebaseUidUserFirebaseUidGet>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetUserByFirebaseUidUserFirebaseUidGetQueryOptions(firebaseUid,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Create Failure
 */
export const createFailureFailuresPost = (
    createFailureInput: CreateFailureInput,
 signal?: AbortSignal
) => {
      
      
      return customAxios<unknown>(
      {url: `/failures`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createFailureInput, signal
    },
      );
    }
  


export const getCreateFailureFailuresPostMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createFailureFailuresPost>>, TError,{data: CreateFailureInput}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof createFailureFailuresPost>>, TError,{data: CreateFailureInput}, TContext> => {
    
const mutationKey = ['createFailureFailuresPost'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createFailureFailuresPost>>, {data: CreateFailureInput}> = (props) => {
          const {data} = props ?? {};

          return  createFailureFailuresPost(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateFailureFailuresPostMutationResult = NonNullable<Awaited<ReturnType<typeof createFailureFailuresPost>>>
    export type CreateFailureFailuresPostMutationBody = CreateFailureInput
    export type CreateFailureFailuresPostMutationError = HTTPValidationError

    /**
 * @summary Create Failure
 */
export const useCreateFailureFailuresPost = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createFailureFailuresPost>>, TError,{data: CreateFailureInput}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof createFailureFailuresPost>>,
        TError,
        {data: CreateFailureInput},
        TContext
      > => {

      const mutationOptions = getCreateFailureFailuresPostMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Analyze Failure
 */
export const analyzeFailureFailuresFailureIdAnalyzePost = (
    failureId: number,
 signal?: AbortSignal
) => {
      
      
      return customAxios<AnalyzeFailureFailuresFailureIdAnalyzePost200>(
      {url: `/failures/${failureId}/analyze`, method: 'POST', signal
    },
      );
    }
  


export const getAnalyzeFailureFailuresFailureIdAnalyzePostMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof analyzeFailureFailuresFailureIdAnalyzePost>>, TError,{failureId: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof analyzeFailureFailuresFailureIdAnalyzePost>>, TError,{failureId: number}, TContext> => {
    
const mutationKey = ['analyzeFailureFailuresFailureIdAnalyzePost'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof analyzeFailureFailuresFailureIdAnalyzePost>>, {failureId: number}> = (props) => {
          const {failureId} = props ?? {};

          return  analyzeFailureFailuresFailureIdAnalyzePost(failureId,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AnalyzeFailureFailuresFailureIdAnalyzePostMutationResult = NonNullable<Awaited<ReturnType<typeof analyzeFailureFailuresFailureIdAnalyzePost>>>
    
    export type AnalyzeFailureFailuresFailureIdAnalyzePostMutationError = HTTPValidationError

    /**
 * @summary Analyze Failure
 */
export const useAnalyzeFailureFailuresFailureIdAnalyzePost = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof analyzeFailureFailuresFailureIdAnalyzePost>>, TError,{failureId: number}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof analyzeFailureFailuresFailureIdAnalyzePost>>,
        TError,
        {failureId: number},
        TContext
      > => {

      const mutationOptions = getAnalyzeFailureFailuresFailureIdAnalyzePostMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
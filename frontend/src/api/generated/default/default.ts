/**
 * Generated by orval v7.5.0 🍺
 * Do not edit manually.
 * FastAPI
 * OpenAPI spec version: 0.1.0
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  CreateFailureInput,
  CreateUserInput,
  HTTPValidationError
} from '../../model'
import { customAxios } from '../../mutator';



/**
 * @summary Create User
 */
export const createUserUsersPost = (
    createUserInput: CreateUserInput,
 signal?: AbortSignal
) => {
      
      
      return customAxios<unknown>(
      {url: `/users`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createUserInput, signal
    },
      );
    }
  


export const getCreateUserUsersPostMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createUserUsersPost>>, TError,{data: CreateUserInput}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof createUserUsersPost>>, TError,{data: CreateUserInput}, TContext> => {
    
const mutationKey = ['createUserUsersPost'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createUserUsersPost>>, {data: CreateUserInput}> = (props) => {
          const {data} = props ?? {};

          return  createUserUsersPost(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateUserUsersPostMutationResult = NonNullable<Awaited<ReturnType<typeof createUserUsersPost>>>
    export type CreateUserUsersPostMutationBody = CreateUserInput
    export type CreateUserUsersPostMutationError = HTTPValidationError

    /**
 * @summary Create User
 */
export const useCreateUserUsersPost = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createUserUsersPost>>, TError,{data: CreateUserInput}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof createUserUsersPost>>,
        TError,
        {data: CreateUserInput},
        TContext
      > => {

      const mutationOptions = getCreateUserUsersPostMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Get User By Firebase Uid
 */
export const getUserByFirebaseUidUsersFirebaseUidGet = (
    firebaseUid: string,
 signal?: AbortSignal
) => {
      
      
      return customAxios<unknown>(
      {url: `/users/${firebaseUid}`, method: 'GET', signal
    },
      );
    }
  

export const getGetUserByFirebaseUidUsersFirebaseUidGetQueryKey = (firebaseUid: string,) => {
    return [`/users/${firebaseUid}`] as const;
    }

    
export const getGetUserByFirebaseUidUsersFirebaseUidGetInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getUserByFirebaseUidUsersFirebaseUidGet>>>, TError = HTTPValidationError>(firebaseUid: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserByFirebaseUidUsersFirebaseUidGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserByFirebaseUidUsersFirebaseUidGetQueryKey(firebaseUid);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserByFirebaseUidUsersFirebaseUidGet>>> = ({ signal }) => getUserByFirebaseUidUsersFirebaseUidGet(firebaseUid, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(firebaseUid), ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserByFirebaseUidUsersFirebaseUidGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetUserByFirebaseUidUsersFirebaseUidGetInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getUserByFirebaseUidUsersFirebaseUidGet>>>
export type GetUserByFirebaseUidUsersFirebaseUidGetInfiniteQueryError = HTTPValidationError


export function useGetUserByFirebaseUidUsersFirebaseUidGetInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserByFirebaseUidUsersFirebaseUidGet>>>, TError = HTTPValidationError>(
 firebaseUid: string, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserByFirebaseUidUsersFirebaseUidGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserByFirebaseUidUsersFirebaseUidGet>>,
          TError,
          Awaited<ReturnType<typeof getUserByFirebaseUidUsersFirebaseUidGet>>
        > , 'initialData'
      >, }

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUserByFirebaseUidUsersFirebaseUidGetInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserByFirebaseUidUsersFirebaseUidGet>>>, TError = HTTPValidationError>(
 firebaseUid: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserByFirebaseUidUsersFirebaseUidGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserByFirebaseUidUsersFirebaseUidGet>>,
          TError,
          Awaited<ReturnType<typeof getUserByFirebaseUidUsersFirebaseUidGet>>
        > , 'initialData'
      >, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUserByFirebaseUidUsersFirebaseUidGetInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserByFirebaseUidUsersFirebaseUidGet>>>, TError = HTTPValidationError>(
 firebaseUid: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserByFirebaseUidUsersFirebaseUidGet>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get User By Firebase Uid
 */

export function useGetUserByFirebaseUidUsersFirebaseUidGetInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserByFirebaseUidUsersFirebaseUidGet>>>, TError = HTTPValidationError>(
 firebaseUid: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserByFirebaseUidUsersFirebaseUidGet>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetUserByFirebaseUidUsersFirebaseUidGetInfiniteQueryOptions(firebaseUid,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetUserByFirebaseUidUsersFirebaseUidGetQueryOptions = <TData = Awaited<ReturnType<typeof getUserByFirebaseUidUsersFirebaseUidGet>>, TError = HTTPValidationError>(firebaseUid: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserByFirebaseUidUsersFirebaseUidGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserByFirebaseUidUsersFirebaseUidGetQueryKey(firebaseUid);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserByFirebaseUidUsersFirebaseUidGet>>> = ({ signal }) => getUserByFirebaseUidUsersFirebaseUidGet(firebaseUid, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(firebaseUid), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUserByFirebaseUidUsersFirebaseUidGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetUserByFirebaseUidUsersFirebaseUidGetQueryResult = NonNullable<Awaited<ReturnType<typeof getUserByFirebaseUidUsersFirebaseUidGet>>>
export type GetUserByFirebaseUidUsersFirebaseUidGetQueryError = HTTPValidationError


export function useGetUserByFirebaseUidUsersFirebaseUidGet<TData = Awaited<ReturnType<typeof getUserByFirebaseUidUsersFirebaseUidGet>>, TError = HTTPValidationError>(
 firebaseUid: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserByFirebaseUidUsersFirebaseUidGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserByFirebaseUidUsersFirebaseUidGet>>,
          TError,
          Awaited<ReturnType<typeof getUserByFirebaseUidUsersFirebaseUidGet>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUserByFirebaseUidUsersFirebaseUidGet<TData = Awaited<ReturnType<typeof getUserByFirebaseUidUsersFirebaseUidGet>>, TError = HTTPValidationError>(
 firebaseUid: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserByFirebaseUidUsersFirebaseUidGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserByFirebaseUidUsersFirebaseUidGet>>,
          TError,
          Awaited<ReturnType<typeof getUserByFirebaseUidUsersFirebaseUidGet>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUserByFirebaseUidUsersFirebaseUidGet<TData = Awaited<ReturnType<typeof getUserByFirebaseUidUsersFirebaseUidGet>>, TError = HTTPValidationError>(
 firebaseUid: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserByFirebaseUidUsersFirebaseUidGet>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get User By Firebase Uid
 */

export function useGetUserByFirebaseUidUsersFirebaseUidGet<TData = Awaited<ReturnType<typeof getUserByFirebaseUidUsersFirebaseUidGet>>, TError = HTTPValidationError>(
 firebaseUid: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserByFirebaseUidUsersFirebaseUidGet>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetUserByFirebaseUidUsersFirebaseUidGetQueryOptions(firebaseUid,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Create Failure
 */
export const createFailureFailuresPost = (
    createFailureInput: CreateFailureInput,
 signal?: AbortSignal
) => {
      
      
      return customAxios<unknown>(
      {url: `/failures`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createFailureInput, signal
    },
      );
    }
  


export const getCreateFailureFailuresPostMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createFailureFailuresPost>>, TError,{data: CreateFailureInput}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof createFailureFailuresPost>>, TError,{data: CreateFailureInput}, TContext> => {
    
const mutationKey = ['createFailureFailuresPost'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createFailureFailuresPost>>, {data: CreateFailureInput}> = (props) => {
          const {data} = props ?? {};

          return  createFailureFailuresPost(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateFailureFailuresPostMutationResult = NonNullable<Awaited<ReturnType<typeof createFailureFailuresPost>>>
    export type CreateFailureFailuresPostMutationBody = CreateFailureInput
    export type CreateFailureFailuresPostMutationError = HTTPValidationError

    /**
 * @summary Create Failure
 */
export const useCreateFailureFailuresPost = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createFailureFailuresPost>>, TError,{data: CreateFailureInput}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof createFailureFailuresPost>>,
        TError,
        {data: CreateFailureInput},
        TContext
      > => {

      const mutationOptions = getCreateFailureFailuresPostMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Get User Failures
 */
export const getUserFailuresFailuresUserIdGet = (
    userId: number,
 signal?: AbortSignal
) => {
      
      
      return customAxios<unknown>(
      {url: `/failures/${userId}`, method: 'GET', signal
    },
      );
    }
  

export const getGetUserFailuresFailuresUserIdGetQueryKey = (userId: number,) => {
    return [`/failures/${userId}`] as const;
    }

    
export const getGetUserFailuresFailuresUserIdGetInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getUserFailuresFailuresUserIdGet>>>, TError = HTTPValidationError>(userId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserFailuresFailuresUserIdGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserFailuresFailuresUserIdGetQueryKey(userId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserFailuresFailuresUserIdGet>>> = ({ signal }) => getUserFailuresFailuresUserIdGet(userId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(userId), ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserFailuresFailuresUserIdGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetUserFailuresFailuresUserIdGetInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getUserFailuresFailuresUserIdGet>>>
export type GetUserFailuresFailuresUserIdGetInfiniteQueryError = HTTPValidationError


export function useGetUserFailuresFailuresUserIdGetInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserFailuresFailuresUserIdGet>>>, TError = HTTPValidationError>(
 userId: number, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserFailuresFailuresUserIdGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserFailuresFailuresUserIdGet>>,
          TError,
          Awaited<ReturnType<typeof getUserFailuresFailuresUserIdGet>>
        > , 'initialData'
      >, }

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUserFailuresFailuresUserIdGetInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserFailuresFailuresUserIdGet>>>, TError = HTTPValidationError>(
 userId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserFailuresFailuresUserIdGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserFailuresFailuresUserIdGet>>,
          TError,
          Awaited<ReturnType<typeof getUserFailuresFailuresUserIdGet>>
        > , 'initialData'
      >, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUserFailuresFailuresUserIdGetInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserFailuresFailuresUserIdGet>>>, TError = HTTPValidationError>(
 userId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserFailuresFailuresUserIdGet>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get User Failures
 */

export function useGetUserFailuresFailuresUserIdGetInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserFailuresFailuresUserIdGet>>>, TError = HTTPValidationError>(
 userId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserFailuresFailuresUserIdGet>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetUserFailuresFailuresUserIdGetInfiniteQueryOptions(userId,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetUserFailuresFailuresUserIdGetQueryOptions = <TData = Awaited<ReturnType<typeof getUserFailuresFailuresUserIdGet>>, TError = HTTPValidationError>(userId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserFailuresFailuresUserIdGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserFailuresFailuresUserIdGetQueryKey(userId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserFailuresFailuresUserIdGet>>> = ({ signal }) => getUserFailuresFailuresUserIdGet(userId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(userId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUserFailuresFailuresUserIdGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetUserFailuresFailuresUserIdGetQueryResult = NonNullable<Awaited<ReturnType<typeof getUserFailuresFailuresUserIdGet>>>
export type GetUserFailuresFailuresUserIdGetQueryError = HTTPValidationError


export function useGetUserFailuresFailuresUserIdGet<TData = Awaited<ReturnType<typeof getUserFailuresFailuresUserIdGet>>, TError = HTTPValidationError>(
 userId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserFailuresFailuresUserIdGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserFailuresFailuresUserIdGet>>,
          TError,
          Awaited<ReturnType<typeof getUserFailuresFailuresUserIdGet>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUserFailuresFailuresUserIdGet<TData = Awaited<ReturnType<typeof getUserFailuresFailuresUserIdGet>>, TError = HTTPValidationError>(
 userId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserFailuresFailuresUserIdGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserFailuresFailuresUserIdGet>>,
          TError,
          Awaited<ReturnType<typeof getUserFailuresFailuresUserIdGet>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUserFailuresFailuresUserIdGet<TData = Awaited<ReturnType<typeof getUserFailuresFailuresUserIdGet>>, TError = HTTPValidationError>(
 userId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserFailuresFailuresUserIdGet>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get User Failures
 */

export function useGetUserFailuresFailuresUserIdGet<TData = Awaited<ReturnType<typeof getUserFailuresFailuresUserIdGet>>, TError = HTTPValidationError>(
 userId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserFailuresFailuresUserIdGet>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetUserFailuresFailuresUserIdGetQueryOptions(userId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



